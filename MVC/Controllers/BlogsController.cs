#nullable disable
using AppCore.Results.Bases;
using Business.Models;
using Business.Services;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using System.Security.Claims;

//Generated by ScaffoldApp.
namespace MVC.Controllers
{
    [Authorize(Roles = "Admin,User")]
    public class BlogsController : Controller
    {
        // Add service injections here
        private readonly IBlogService _blogService;
        private readonly ITagService _tagService;
        private readonly IUserService _userService;

        public BlogsController(IBlogService blogService, ITagService tagService, IUserService userService)
        {
            _blogService = blogService;
            _tagService = tagService;
            _userService = userService;
        }

        // GET: Blogs
        public IActionResult Index()
        {
            List<BlogModel> blogList = _blogService.Query().ToList();
            return View(blogList);
        }

        
        public IActionResult Details(int id)
        {
            BlogModel blog = _blogService.Query().SingleOrDefault(b => b.Id == id); // TODO: Add get item service logic here
            if (blog == null)
            {
                return NotFound();
            }
            return View(blog);
        }

        // GET: Blogs/Create
        public IActionResult Create()
        {
            //ViewData["UserId"] = new SelectList(_userService.GetUsers(), "Id", "UserName");
            ViewBag.Tags = new MultiSelectList(_tagService.Query().ToList(), "Id", "Name");
            return View();
        }

        // POST: Blogs/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult Create(BlogModel blog)
        {
            if (ModelState.IsValid)
            {
                Result result = _blogService.Add(blog);
                if(result.IsSuccessful)
                {
                    TempData["Message"] = result.Message;

					return RedirectToAction(nameof(Index));
				}
                ModelState.AddModelError("", result.Message);
			}
			//ViewData["UserId"] = new SelectList(_userService.GetUsers(), "Id", "UserName");
			ViewBag.Tags = new MultiSelectList(_tagService.Query().ToList(), "Id", "Name");
			return View(blog);
        }

		private int GetUserId()
		{
			return Convert.ToInt32(User.Claims.SingleOrDefault(c => c.Type == ClaimTypes.Sid).Value);
		}



		// GET: Blogs/Edit/5
		public IActionResult Edit(int id)
		{
			BlogModel blog = _blogService.Query().SingleOrDefault(b => b.Id == id);
			if (blog == null)
			{
				return View("_Error", "Blog not found!");
			}


			ViewData["UserId"] = new SelectList(_userService.GetUsers(), "Id", "UserName", blog.UserId);
			ViewData["Tags"] = new MultiSelectList(_tagService.GetList(), "Id", "Name", blog.TagIds);
			return View(blog);
		}

		// POST: Blogs/Edit
		[HttpPost]
        [ValidateAntiForgeryToken]
		public IActionResult Edit(BlogModel blog, IFormFile image)
		{
			

			if (ModelState.IsValid)
			{
				var result = _blogService.Update(blog);

				if (result.IsSuccessful)
				{
					
						TempData["Message"] = result.Message;
						return RedirectToAction(nameof(Index));
					
				}
				ModelState.AddModelError("", result.Message);
			}
			// Add get related items service logic here to set ViewData if necessary and update null parameter in SelectList with these items
			ViewData["UserId"] = new SelectList(_userService.GetUsers(), "Id", "UserName", blog.UserId);
			ViewData["Tags"] = new MultiSelectList(_tagService.GetList(), "Id", "Name", blog.TagIds);
			return View(blog);
		}



		// GET: Blogs/Delete/5
		public IActionResult Delete(int id)
        {
            var blog = _blogService.Query().SingleOrDefault(b => b.Id == id);
            if (blog == null)
            {
                return NotFound();
            }
            var result = _blogService.Delete(id);

            TempData["Message"] = result.Message;

            return RedirectToAction(nameof(Index));
        }

        // POST: Blogs/Delete
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public IActionResult DeleteConfirmed(int id)
        {
            // TODO: Add delete service logic here
            return RedirectToAction(nameof(Index));
        }
	}
}
